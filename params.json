{"name":"HackerGym ","tagline":"Code for Solutions ","body":"## What is this ?\r\n\r\nThis repo contains solutions for coding challenges on http://hackergym.com. \r\n\r\nFor each question, there are multiple solutions available in Java. In addition, all solutions come with extensive unit tests that test for correctness and common pitfalls and edge cases. \r\n\r\nMore importantly, each solution contains placeholders for you own custom solution. You can add your own solutions to these placeholders and all the unit tests will automatically run on it and verify it's correctness. \r\n\r\n\r\n## How to use this ?\r\n\r\nThe best way to use this repo is along with http://hackergym.com. \r\n\r\nWe recommend that you go through each question using the simulated environment on the website. Then, if you have a better solution and want to verify it use this repo to run our unit tests against it. \r\n\r\n\r\n## How to set up\r\n\r\nFirst you need to install JDK 8 from [here](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html). \r\n\r\nAfter the installation do the following to make sure you have the correct version: \r\n\r\n```\r\n$ javac -version\r\n```\r\n\r\nNow download the zip/tar file from top of this page and unzip it. Then follow the instructions below for your favorite java development tool. \r\n\r\n### Command Line\r\n\r\nFrom the extracted folder: \r\n\r\n```\r\n$ cd JavaSolutions/\r\n$ ./gradlew\r\n$ ./gradlew test\r\n\r\n```\r\nThis will run all the unit tests against the code. \r\n\r\nYou can use the ``./gradlew`` to run any task inlcuding build and test.\r\n\r\n### Eclipse\r\n\r\nFirst install Gradle from Eclipse Marketplace.\r\n\r\n![image](https://s3-us-west-2.amazonaws.com/hackergym-images/0.gif):\r\n\r\nNow set you project java version to 1.8:\r\n\r\n![image](https://s3-us-west-2.amazonaws.com/hackergym-images/1.gif)\r\n\r\nHaving installed the Gradle plugin, import the project as a Gradle project:\r\n\r\n![image](https://s3-us-west-2.amazonaws.com/hackergym-images/2.gif)\r\n\r\nFinally, open the Gradle Task view and run with test. \r\n\r\n![image](https://s3-us-west-2.amazonaws.com/hackergym-images/3.gif)\r\n\r\nThis will run all of the unit tests on the solutions. \r\n\r\n\r\n### IntellijIDEA\r\n\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at http://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}